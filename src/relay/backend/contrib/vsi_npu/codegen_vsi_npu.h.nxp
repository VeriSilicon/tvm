
#ifndef TVM_RELAY_BACKEND_CONTRIB_VSI_NPU_CODEGEN_VSI_NPU_H_
#define TVM_RELAY_BACKEND_CONTRIB_VSI_NPU_CODEGEN_VSI_NPU_H_

#include <tvm/ir/error.h>
#include <tvm/runtime/object.h>
#include <tvm/runtime/module.h>

#include <tim/vx/context.h>
#include <tim/vx/graph.h>
#include <tim/vx/operation.h>

#include "vsi_npu_api.h"

using namespace tvm::runtime;


namespace tvm {
namespace relay {
namespace contrib {
namespace vsi_npu {



struct RawGraphDef {
    std::shared_ptr<char> compiled_graph;
    uint32_t compiled_graph_size;
    std::vector<::tim::vx::TensorSpec> inputs_spec;
    std::vector<::tim::vx::TensorSpec> outputs_spec;
};
class VsiErrorReporter {
    public:
     VsiErrorReporter(const IRModule& module, const GlobalVar& var) : module_(module), var_(var) {}

     void ReportFatalError(const ObjectRef& expr, const VsiError& error) {
         //TODO
     }

     protected:
     tvm::ErrorReporter error_reporter_;
     IRModule module_;
     GlobalVar var_;
};

class TensorMakerImpl : private ExprVisitor, private VsiErrorReporter {
    public:
    TensorMakerImpl(const IRModule& module, const GlobalVar& var) : VsiErrorReporter( module, var) {}

    std::map<Expr, std::vector<::tim::vx::TensorSpec>> Create(const Expr& expr);

    private:
    void InferCall(const CallNode* cn);
    void VisitInferred(const Expr& expr);

    void VisitExpr_(const CallNode* cn) final;

    // TODO:
    void VisitExpr_(const TupleNode* tn) final {};
    void VisitExpr_(const TupleGetItemNode* tg) final {};
    void VisitExpr_(const FunctionNode* fn) final {}

    std::map<Expr, std::vector<::tim::vx::TensorSpec>> tensor_info_tbl_;
};

std::map<Expr, std::vector<::tim::vx::TensorSpec>> MakeTensor(const IRModule& module,
                                                              const GlobalVar& var,
                                                              const Expr& expr) {
  return TensorMakerImpl(module, var).Create(expr);
}

// class GraphMakerImpl : public MixedModeVisitor, private VsiErrorReporter {
class GraphMakerImpl : public ExprVisitor, private VsiErrorReporter {
 public:
  GraphMakerImpl(const IRModule& module, const GlobalVar& var) : VsiErrorReporter(module, var) {}

  RawGraphDef Create(const Function& func);

 private:
  void InferCall(const CallNode* cn);
  void VisitInferred(const Expr& expr);
  void VisitExpr_(const CallNode* cn) final;
  void VisitExpr_(const TupleNode* op) final { std::cout << "GraphMakerImpl: TupleNode" << std::endl; };
  void VisitExpr_(const TupleGetItemNode* tg) final { std::cout << "GraphMakerImpl: TupleGetItemNode" << std::endl;};
//   void VisitLeaf(const Expr& expr) final { std::cout << "GraphMakerImpl: Expr" << std::endl;};

  VsiError CreateAdditionOp(const CallNode* cn);
  VsiError CreateReluOp(const CallNode* cn);
  VsiError CreateSoftmaxOp(const CallNode* cn);

  TensorInfoTable tensor_info_tbl_;
  VxTensorTable vx_tensor_tbl_;
  VxOperationTable vx_op_tbl_;
  std::shared_ptr<::tim::vx::Graph> vx_graph_;

  static std::shared_ptr<::tim::vx::Context> vx_global_ctx_;
};

RawGraphDef MakeGraph(const IRModule& module, const GlobalVar& var, const Function& func) {
    return GraphMakerImpl(module, var).Create(func);
}

class VsiNpuCompiler {
    public:
    static runtime::Module CreateRuntimeModule(const ObjectRef& ref);
};

class VsiNpuCompilerOption {
    // TODO: vsimulator configuration
    // Optimization switch

    private:
    std::string target_platform_name_;
};

runtime::Module CompileVsiNpu(const ObjectRef& ref) {

    return VsiNpuCompiler::CreateRuntimeModule(ref);
}

TVM_REGISTER_GLOBAL("relay.ext.vsi_npu").set_body_typed(CompileVsiNpu);

}  // namespace vsi_npu
}  // namespace contrib
}  // namespace relay
}  // namespace tvm

#endif
